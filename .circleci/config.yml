version: 2.1

commands:
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}
#          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
#          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          key: sccache-cache-stable-{{ arch }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"

jobs:
  build:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - restore-sccache-cache
      - run:
          name: rustfmt
          command: |
            cargo fmt --version
            cargo fmt -- --check
      - run:
          name: clippy
          command: |
            cargo clippy --version
            cargo clippy --all-features
      - run:
          name: audit
          command: |
            cargo audit --version
            cargo audit
      - save-sccache-cache

  tests_rust:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - restore-sccache-cache
      - run:
          name: rust unit tests --all-features
          command: |
            rustc --version
            cargo --version
            cargo test --lib --all-features
      # No need to save this in cache

  tests_ffi:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - restore-sccache-cache
      - run:
          name: Initial configuration
          command: |
            sudo apt-get install -y default-jdk g++ gcc valgrind snapd
            wget -O sdk.install.sh "https://get.sdkman.io"
            sudo bash sdk.install.sh
            sudo source "/root/.sdkman/bin/sdkman-init.sh"
            sudo sdk install kotlin
            rustup install nightly
            cargo +nightly install cbindgen
      - run: OUT_DIR=/tmp/c ./.circleci/test_c.sh
      - run: OUT_DIR=/tmp/cpp ./.circleci/test_cpp.sh
      - run: OUT_DIR=/tmp/java ./.circleci/test_java.sh
      - run: OUT_DIR=/tmp/kotlin ./.circleci/test_kotlin.sh

  tests_wasm:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - run: cargo --version
      - restore-sccache-cache
      - run: sudo apt-get update && sudo apt-get install -y firefox-esr
      - run: make deps_wasm
      # Disabling Chrome (only Firefox) due to  https://github.com/Zondax/filecoin-rs/issues/68
      - run: make test_wasm_unit
      - run: make test_wasm_node
      #- run: make test_wasm_browser
      # No need to save this in cache

  tests_service:
    docker:
      - image: zondax/rust-ci:latest
#    environment:
#      LOTUS_SECRET_URL: some_url
#      LOTUS_SECRET_JWT: some_jwt
    steps:
      - checkout
      - restore-sccache-cache
      - run: cargo build
      - run:
          name: patch configuration file
          command: |
            echo [service] >> filecoin-service.toml
            echo address = \"127.0.0.1:3030\" >> filecoin-service.toml
            echo [remote_node] >> filecoin-service.toml
            echo url = \"$LOTUS_SECRET_URL\" >> filecoin-service.toml
            echo jwt = \"$LOTUS_SECRET_JWT\" >> filecoin-service.toml
      - run:
          name: start service
          background: true
          command: |
            cargo run -- start
      - run:
          name: install node dependencies
          command: |
            cd examples/jsonrpc
            yarn install
      - run: ls .circleci
      - run:
          name: wait for service to be available
          command: .circleci/wait_for_port.sh 3030
      - run:
          name: run jsonrpc tests
          command: |
            cd examples/jsonrpc
            yarn run test:unit
            yarn run test:integration
      # No need to save this in cache

  npm_publish:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - restore-sccache-cache
      - run: make build_wasm
      - run:
          name: Update tag
          command: |
            cd /home/circleci/project/signer-wasm/pkg
            echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > .npmrc
            npm --no-git-tag-version version $CIRCLE_TAG
            npm publish


  docs_publish:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run: yarn
      - run: yarn build
      - add_ssh_keys:
          fingerprints:
            - "01:f2:c9:e2:64:68:8e:20:52:41:de:1a:bd:19:83:5b"
      - run:
          name: Install and configure dependencies
          command: |
            yarn global add gh-pages@2.2.0
            git config user.email "ci-build@zondax.ch"
            git config user.name "ci-build"
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            $(yarn global bin)/gh-pages --message "[skip ci] Updates" --dist docs/.vuepress/dist

workflows:
  build_all:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - tests_ffi:
          filters:
            tags:
              only: /.*/
          requires:
            - build
      - tests_rust:
          filters:
            tags:
              only: /.*/
          requires:
            - build
      - tests_wasm:
          filters:
            tags:
              only: /.*/
          requires:
            - build
      - tests_service:
          filters:
            tags:
              only: /.*/
          requires:
            - build
      # Disabling until repository is public
#      - docs_publish:
#          requires:
#            - tests_rust
#            - tests_wasm
#            - tests_service
#          filters:
#            branches:
#              only: master
      - npm_publish:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*/
            branches:
              only:
                - master
          requires:
            - build
